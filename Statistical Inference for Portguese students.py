#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Feb 23 12:07:35 2020

@author: jinanwachikafavour
"""

import pandas as pd
from scipy import stats as st
url_math = 'https://docs.google.com/spreadsheets/d/1MmUvgHBSpbZZ-ytuDrnDZdfV2tZo6dpo/export?format=csv'
#download student math file to program
math_data = pd.read_csv(url_math) #load file into a pandas dataframe
math_data #show table
female_m_g1 = list(math_data["G1"][math_data["sex"] == "F"]) #extract only female G1 math scores into list
female_m_g2 = list(math_data["G2"][math_data["sex"] == "F"]) #extract only female G2 math scores into list
female_m_g3 = list(math_data["G3"][math_data["sex"] == "F"]) #extract only female G3 math scores into list
fe_composite_math = [] #initialize all female math scores list
for a in female_m_g1: #loop through each element in female_m_gl
    fe_composite_math+=[a] #append element to fe_composite_math
for b in female_m_g2:
    fe_composite_math+=[b]
for c in female_m_g3:
    fe_composite_math+=[c]
print(fe_composite_math,'\n','The total number of female math scores is',len(fe_composite_math))

male_m_g1 = list(math_data["G1"][math_data["sex"] == "M"]) #extract only male G1 math scores into list
male_m_g2 = list(math_data["G2"][math_data["sex"] == "M"]) #extract only male G2 math scores into list
male_m_g3 = list(math_data["G3"][math_data["sex"] == "M"]) #extract only male G3 math scores into list
m_composite_math = [] #initialize all male math scores list
for g in male_m_g1:#loop through each element in male_m_g1
    m_composite_math+=[g] #append element to m_composite_math
for h in male_m_g2:
    m_composite_math+=[h]
for i in male_m_g3:
    m_composite_math+=[i]
print(m_composite_math,'\n','The total number of male math scores is',len(m_composite_math))
import numpy as np
import statistics as stat
def median(array):
    """"Function that returns the median of an array object"""
    n=len(array) #gets the number of entries in the list 
    array.sort() #sorts the elements in the list in ascending order
    if n % 2 == 0: #there is an even number of elements in list
        middle1 = array[n//2] #first pair of middle number
        middle2 = array[n//2 - 1] #second pair of middle number
        median = (middle1 + middle2)/2 #average the middle pairs of elements
    else: #there is an odd number of elements in list
        median = array[n//2] #element in the middle is median
    if median == stat.median(array): 
    #compares median computed by function to the value obtained by statistics module
        return median

              
def mode(array):
    """Function that returns the mode of a list/array using a counting dictionary"""
    counters={}# Initialize counting dictionary
    list_of_frequency=[] #initializes list of frequencies of repectives data
    for elem in array: #iterates through each element in list
        if elem not in counters: #element not in dictionary key
            counters[elem]=1 # First occurrence, add new number to key and count it once 
        else:
            counters[elem] +=1 # Increment existing counter
    for frequency in counters.values(): #iterates through all values in dictionary
        list_of_frequency += [frequency] #add this number to a list
    list_of_frequency.sort() #Sorts the elements of the list in ascending order.     
    highest_frequency = list_of_frequency[-1] #gets last element in list;largest element in list
    for keys in counters: 
        if counters[keys]==highest_frequency: #if value associated with key is the highest
            mode = keys #assign the mode to this key
    if mode == stat.mode(array): #compare with the mode generated by statistics module
        return mode



def mean(array):
    """Function that returns the mean of list/array object"""
    length = len(array) #total number of elements in list
    total=0 #initializes the sum of elements in list
    for elem in array: #iterates through each element
        total += elem #add element to total
    mean=total/length #compute the average
    if mean == np.mean(array):  #compare with mean generated by numpy module
        return mean



def standard_deviation(array):
    """Function that returns the standard deviation of a list/array object"""
    total = 0 #initializes sum of elements in the list
    total_square_deviation = 0 #initializes the sum of the squares of the deviations
    deviation_list = [] #initializes list which will contain squares of the deviations
    n = len(array) #number of elements in list
    for elem in array: #loops through each elem in array
        total += elem #adds the elem to total
    average = total/len(array) #computes mean
    for num in array: #loops through each element in array
        deviation_square = (num-average)**2 #square difference between number and mean
        deviation_list += [deviation_square] #add the square of deviations of each element to the list
    for num in deviation_list: #loops through each element in list
        total_square_deviation += num #sums the square of the deviations
    variance = total_square_deviation/(n-1) #computes variance with Bessel's correction for sample data
    std_dev = variance **0.5 #square root of variance
    
    return std_dev
print('The average female math score is',mean(fe_composite_math))
print('The average male math score is',mean(m_composite_math))
print('The median female math score is',median(fe_composite_math))
print('The median male math score is',median(m_composite_math))
print('The modal female math score is',mode(fe_composite_math))
print('The modal male math score is',mode(m_composite_math))
print('The standard deviation for female math score is',standard_deviation(fe_composite_math))
print('The standard deviation for male math score is',standard_deviation(m_composite_math))
#%matplotlib inline
import math
#displays inline image
import matplotlib.pyplot as plt  #imports matplotlib
def bin_number(array):
    """Function provides a recommended number of bins using Sturges formula floor(1+log2(n)), where n is the 
    number of data points. It assumes the data follow a normal distribution."""
    n = len(array) 
    bin_number = math.floor(1+math.log2(n)) #computes no of bins with sturges formula
    return bin_number

plt.hist(fe_composite_math, bins=bin_number(fe_composite_math), edgecolor='black') #plots histogram
plt.xlabel('Female Math Scores (Marks)') #label x axis
plt.ylabel('Frequency') #label y-axis

plt.show()
plt.hist(m_composite_math, bins=bin_number(m_composite_math), edgecolor='black')
#plots histogram, using sturges formula because test scores are known to follow normal distributions
plt.xlabel('Male Math Scores (Marks)') #label x axis
plt.ylabel('Frequency') #label y-axis

plt.show()
def standard_error_difference_of_means (array1,array2):
    """Function accepts two arrays and computes the standard error of the difference of two means of the arrays
    using the formula (s1**2/n1 + s2**2/n2)**0.5 where n is the sample size and s is the standard deviation of 
    sample """
    sample_std1 = standard_deviation(array1) #standard std of sample with bessel's correction
    sample_var1 = sample_std1**2 #computes the sample variance
    sample_std2 = standard_deviation(array2)
    sample_var2 = sample_std2**2 #computes the variance 
    sample_size1=len(array1)
    sample_size2 = len(array2)#length of array
    standard_error = ((sample_var1/sample_size1) + (sample_var2/sample_size2))**0.5
    #computes standard error using the formula (s1**2/n1 + s2**2/n2)**0.5
    return standard_error
print('The standard error for the difference of average female math score and male math score means is'\
      ,standard_error_difference_of_means(m_composite_math,fe_composite_math))   
def confidence_interval_difference_of_means(array1,array2,one_tailed_confidence_level):
    """Function accepts two arrays and constructs a confidence interval for difference of two means using the 
    formula point estimate +- t* * SE (standard error) where point estimate is xbar1-xbar2""" 
    difference = mean(array1)-mean(array2) #difference of sample means
    standard_error = standard_error_difference_of_means (array1,array2) #calculate standard error
    margin_of_error = standard_error * (st.norm.ppf(one_tailed_confidence_level))
    #calculate margin of error with z* * SE
    #st.norm.ppf gets the z score for a 1tailed percentile
    lower_bound = difference - margin_of_error #constructs confidence interval's lower bound
    upper_bound = difference + margin_of_error #constructs confidence interval's upper bound
    confidence_interval = [lower_bound,upper_bound] #creates confidence interval
    #array_name = input('Enter the name of the variable')
    return confidence_interval
print('The 95% confidence interval for the difference of means is'\
      ,confidence_interval_difference_of_means(m_composite_math,fe_composite_math,0.975))
def Z_score_hypothesis_test(array1,array2, null_value):
    """Function accepts 2 arrays and a null value and calculates the Z score for the difference of two means using 
    the formula Z= difference of means - null value/SE"""
    difference = mean(array1)-mean(array2) #difference of sample means
    standard_error = standard_error_difference_of_means (array1,array2) #calculate standard error
    z_score = (difference-null_value)/standard_error 
    #calculates the z score with formula Z= difference of means - null value/SE
    return z_score
print('The Z-score is',Z_score_hypothesis_test(m_composite_math,fe_composite_math,0))
def p_value(array1,array2,null_value,tail_number):
    """Function accepts 2 arrays and a null value and calculates the p value for the hypothesis test of difference
    of two means using the formula 1- percentile(Zscore)"""
    z_score = Z_score_hypothesis_test(array1,array2, null_value) #computes Z score
    z_percentile = (st.norm.cdf(z_score)) #converts z score to a 1-tailed percentile 
    p_value = (1-z_percentile)*tail_number #calculates the p_value using the formula 1-percentile(Zscore)   
    return p_value
print('The p value is',p_value(m_composite_math,fe_composite_math,0,2))
def cohen_d(array1,array2):
    """Function accepts 2 arrays and computes the effect size using cohen's d formula given by 
    d=mean1-mean2/(((n1-1)*(s1**2)) + ((n2-1)*(s2**2)))/n1+n2-2)**0.5"""
    mean_difference = mean(array1)-mean(array2) #difference of sample means
    len1 = len(array1)
    len2 = len(array2)
    var1 = (standard_deviation(array1))**2
    var2 = (standard_deviation(array2))**2
    denom = len1 +len2-2
    denominator = ((((len1-1)*var1) + ((len2-1)*var2))/denom)**0.5
    cohen_d = mean_difference/denominator 
    return cohen_d
print ("Cohen's effect size is,",cohen_d(m_composite_math,fe_composite_math))
print('The 99% confidence interval for the difference of means is'\
      ,confidence_interval_difference_of_means(m_composite_math,fe_composite_math,0.995))